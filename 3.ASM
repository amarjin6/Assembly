        org 100h


start:
                mov ah, 09h
                mov dx, inputL          ;предложение ввода L
                int 21h

                mov ah, 0ah
                mov dx, strL            ;вводим первое число L
                int 21h

                mov bx, dx              ;помещаем в bx ссылку на строку в качестве передачи регистра как параметра процедуры
                call count_number       ;извлекаем из строки число L
                push ax                 ;результат из регистра ах помещаем в стек

                mov ah, 02h
                mov dx, 0x0D0A
                int 21h

                mov ah, 09h
                mov dx, inputM          ;предложение ввода M
                int 21h

                mov ah, 0ah
                mov dx, strM            ;вводим второе число M
                int 21h

                mov bx, dx
                call count_number       ;извлекаем из строки число M
                push ax                 ;результат из регистра ах в стек

                call get_result         ;получаем результат вычислений


                mov ax, [res]           ;перемещаем в ах результат для последующего вывода ответ
                call output_number      ;вывод ответа

                pop ax                  ;чистим стек
                pop ax

                mov ah, 08h
                int 21h                 ;конец основной части программы
                ret

count_number:                    ;процедура получения числа из строки
                xor ax, ax      ;обнуляем ах
                xor dx, dx      ;обнуляем dx

                add bx, 1h      ;передвигаем адрес строки на 1
                mov cl, [bx]    ;захватываем 1 байт, в котором находится фактическая длина строки

lp:                             ;цикл получения числа
                inc bx          ;увеличиваем указатель на строку на 1
                mul [cm]        ;умножаем на 10
                add al, [bx]    ;прибавляем цифру
                sub ax, '0'     ;убираем код '0'

                loop lp         ;уменьшаем регистр сх на 1, сравниваем с нулем, если не ноль, то повторяем цикл



                ret


output_number:                   ;процедура вывода числа на экран
                push '*'        ;запоминаем, что концом числа в стеке будет символ *

lpt:                            ;цикл разбиения числа на цифры и передача его в стек
                div [cm]        ;деление числа на 10, остаток уходит в dx
                push dx         ;добавляем в стек остаток от деления
                xor dx, dx      ;очищаем dx от уже занесенного результата
                cmp ax, 0h      ;сравниваем результат деления с 0
                jne lpt         ;если не 0, то заново цикл


                mov ah, 02h
                mov dx, 0x0D0A
                int 21h

lpp:                            ;цикл вывода числа
                pop bx          ;вытаскиваем число из стека

                cmp bx, '*'     ;если конец стека
                je endst        ;то выходим из цикла

                add bx, '0'     ;иначе добавляем '0' чтобы получить символ

                mov ah, 02h
                mov dx, bx      ;выводим символ
                int 21h

                jmp lpp         ;повторяем цикл

endst:          ret             ;выходим

get_result:
                mov bp, sp      ;в регистр bp передаем указатель на стек для доступа к другим переменным стека

                mov ax, [bp+4]  ;в регистр ах передаем переменную L
                mov cx, 20h
                mul cx ;32*L в ax
                mov cx, ax  ;32*L в cx

                mov bx, [bp+2]  ;в регистр ax передаем переменную M
                mov ax, [bp+2]
                mul bx ;в ax M*M
                mov bx, 7h
                mul bx;7*M*M в ax



                add ax, cx      ;
                mov [res], ax   ;сохраняем результат

                ret             ;выходим из процедуры





inputL          db "Enter number L: $"
inputM          db "Enter number M: $"
outputRes       db "A+B = $"
strL            db 10, 0, 10 dup(?)
strM            db 10, 0, 10 dup(?)
numL            dw 0h
numM            dw 0h
cm              dw 10
res             dw 0h

